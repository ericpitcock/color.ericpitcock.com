{"version":3,"sources":["color.js"],"names":["Color","colors","red","orange","yellow","green","blue","purple","pink","grayscale","currentPalette","palettes","palette-1","palette-2","palette-3","palette-4","palette-5","palette-6","generateColors","object","hue","randomColor","luminosity","count","createSwatches","value","$","append","clearPalette","empty","removeClass","hide","show","find","remove","paletteCheck","handlePaletteSwitch","e","target","attr","replace","handleSwatchClick","$this","this","color","data","palette","parent","hasClass","clone","appendTo","addClass","push","parents","children","i","indexOf","splice","$activePaletteTab","$paletteControlsButtons","$addSwatchesNotification","length","clipboardNotification","fadeIn","delay","fadeOut","initialize","document","documentElement","className","on","window","scrollTo","addColorSet","click","FastClick","attach","body","sortable","containment","opacity","tolerance","ready"],"mappings":"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","file":"color.min.js","sourcesContent":["/// COLOR /////////////////////////////////////////////////////////\n\nvar Color = {\n\n    colors: {\n        'red': [],\n        'orange': [],\n        'yellow': [],\n        'green': [],\n        'blue': [],\n        'purple': [],\n        'pink': [],\n        'grayscale': [\n            '#000000',\n            '#303030',\n        \t'#616161',\n        \t'#919191',\n        \t'#C2C2C2',\n        \t'#F2F2F2'\n        ]\n    },\n    currentPalette: 'palette-1',\n    palettes: {\n        'palette-1': [],\n        'palette-2': [],\n        'palette-3': [],\n        'palette-4': [],\n        'palette-5': [],\n        'palette-6': []\n    },\n\n    generateColors: function(object) {\n        // for each hue, populate its array with random values\n        for (var hue in object) {\n            // skip grayscale since it's already defined\n            if (hue == 'grayscale') {\n                return true;\n            }\n\n            // populate the array with random colors\n            Color.colors[hue] = randomColor({\n                hue: hue,\n                luminosity: 'bright',\n                count: 12\n            });\n        }\n    },\n\n    createSwatches: function(object) {\n        // for every key (hue) in the object\n        for (var hue in object) {\n            // for every value in each hue\n            for (var value in object[hue]) {\n                $('#' + hue).append('<div class=\"swatch ' + hue + '\" data-swatch-color=\"' + object[hue][value] + '\" style=\"background-color: ' + object[hue][value] + '\"></div>');\n            }\n        }\n    },\n\n    clearPalette: function() {\n        var currentPalette = Color.currentPalette;\n\n        // clear array\n        Color.palettes[currentPalette] = [];\n\n        // remove swatches\n        $('.palettes .active').empty();\n\n        // clear indicators\n        $('.in-' + currentPalette)\n            .removeClass('in-' + currentPalette)\n            .hide()\n            .show(0)\n            .find('span.' + currentPalette)\n            .remove();\n\n        // check palettes\n        Color.paletteCheck();\n    },\n\n    handlePaletteSwitch: function(e) {\n        // get current palette based on tab clicked\n        Color.currentPalette = $(e.target).attr('data-target').replace('#','');\n\n        // run palette check\n        Color.paletteCheck();\n    },\n\n    handleSwatchClick: function(e) {\n        var $this = $(this),\n            color = $this.data('swatch-color'),\n            currentPalette = Color.currentPalette,\n            palette = Color.palettes[currentPalette];\n\n        // if clicked swatch is in a color set (aka, adding)\n        if ($(e.target).parent().hasClass('tab-pane')) {\n\n            // if the color doesn't exist in the current palette\n            //********** TO DO: CHECK AGAINST THE ARRAY INSTEAD\n            if (!$this.hasClass('in-' + currentPalette)) {\n                // copy swatch to palette\n                $this\n                    .clone(true)\n                    .empty()\n                    .appendTo('.palettes .active');\n\n                // add class noting which palette it's been added to\n                $this.addClass('in-' + currentPalette);\n\n                // add to swatches array for current palette\n                palette.push(color);\n            } else {\n                // $('#' + currentPalette + '.active')\n                //     .find('.swatch:not([data-swatch-color=\"' + color + '\"])')\n                //     .css('opacity', '0.5');\n            }\n\n        // if clicked swatch is in a palette (aka, removing)\n        } else if ($(e.target).parents().hasClass('palettes')) {\n\n            // remove in-palette class\n            $('.tab-pane')\n                .children('*[data-swatch-color=\"' + color + '\"]')\n                .removeClass('in-' + Color.currentPalette);\n\n            // remove from swatches array for current palette\n            var i = palette.indexOf(color);\n            if (i != -1) {\n                palette.splice(i, 1);\n            }\n            // remove swatch from palette\n            $this.remove();\n        }\n\n        // run palette check\n        Color.paletteCheck();\n    },\n\n    paletteCheck: function() {\n        var currentPalette = Color.palettes[Color.currentPalette],\n            $activePaletteTab = $('.palette-tabs .active a[data-target=\"#' + Color.currentPalette + '\"]'),\n            $paletteControlsButtons = $('.palette-control button'),\n            $addSwatchesNotification = $('.palettes p');\n\n        // palette has swatches\n        if (currentPalette.length > 0) {\n            $activePaletteTab.addClass('has-swatches');\n            $paletteControlsButtons.removeClass('disabled');\n            $addSwatchesNotification.hide();\n\n        // if palette is empty\n        } else if (currentPalette.length === 0) {\n\t\t\t$activePaletteTab.removeClass('has-swatches');\n\t\t\t$paletteControlsButtons.addClass('disabled');\n\t\t\t$addSwatchesNotification.show();\n        }\n    },\n\n    clipboardNotification: function() {\n        $('.clipboard-notification')\n            .fadeIn()\n            .delay(2000)\n            .fadeOut('slow');\n    },\n\n    initialize: function() {\n        // safari doesnt support clipboard action, so don't show the button\n        //if (navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {\n        //    $('.copy-css').hide();\n        //}\n\n        // test for touch\n        if (!('ontouchstart' in document.documentElement)) {\n            document.documentElement.className += 'no-touch';\n        }\n\n        // generate colors\n        Color.generateColors(Color.colors);\n\n        // create swatches\n        Color.createSwatches(Color.colors);\n\n        // listen for tab switch\n        $('ul.color-sets li a[data-toggle=\"tab\"]').on('shown.bs.tab', function(e) {\n            // scroll to top\n            window.scrollTo(0, 0);\n        });\n\n        // listen for click events\n        $('.swatch').on('click', Color.handleSwatchClick);\n        $('.clear-palette').on('click', Color.clearPalette);\n        $('.add-color-set').on('click', Color.addColorSet);\n\n        // listen for palette switching\n        $('.palette-tabs').on('click', 'li a:not(.add-palette)', Color.handlePaletteSwitch);\n\n        // about panel\n        $('h1').click(function() {\n            $('.about-overlay').fadeIn();\n        });\n\n        $('.about-overlay').click(function(e) {\n            if (e.target !== this) {\n                return;\n            } else {\n                $(this).fadeOut();\n            }\n        });\n\n        // fast button action\n        $(function() {\n            FastClick.attach(document.body);\n        });\n\n        // initialize first palette as sortable\n        $('.palettes > div').sortable({\n            containment: '.palettes',\n            opacity: 0.5,\n            tolerance: 'pointer'\n        });\n\n        // instantiate clipboard action\n        //new Clipboard('.copy-css');\n    }\n};\n\n$(document).ready(function() { Color.initialize(); });\n"],"sourceRoot":"/source/"}